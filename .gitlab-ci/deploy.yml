.deploy_linux:
  stage: deploy
  variables:
    PACKAGE_FILE: ${NAME}_${CI_COMMIT_TAG}_${ARCHITECTURE}.deb
  script:
  - "[[ -n ${PACKAGE_EXTRA} ]] && sh -c \"${PACKAGE_EXTRA}\""
  - "mkdir -p deploy/data/lib/systemd/system"
  - "mkdir -p deploy/data/usr/bin"
  - "cp -r deploy/apt deploy/data/DEBIAN"
  - "cp deploy/systemd/${NAME}.service deploy/data/lib/systemd/system"
  - "cp ${NAME}-linux-${ARCHITECTURE} deploy/data/usr/bin/${NAME}"
  - "md5deep -lr deploy/data | grep -v DEBIAN | sed \"s+deploy/data/++g\" | sort -k2 > deploy/data/DEBIAN/md5sums"
  - "sed -i \"s+^Version:.*+Version: ${CI_COMMIT_TAG}+g\" deploy/data/DEBIAN/control"
  - "sed -i \"s+^Architecture:.*+Architecture: ${ARCHITECTURE}+g\" deploy/data/DEBIAN/control"
  - "chmod +x deploy/data/DEBIAN/postinst"
  - "chmod +x deploy/data/DEBIAN/prerm"
  - "fakeroot dpkg-deb --build deploy/data"
  - "mv deploy/data.deb ${PACKAGE_FILE}"
  - "reprepro -b /var/www/apt.homed.dev -C main includedeb debian ${PACKAGE_FILE}"
  artifacts:
    paths:
    - ${PACKAGE_FILE}
    expire_in: never
  rules:
  - if: $CI_COMMIT_TAG =~ /^\d.\d.\d+$/
    when: always
  - when: never

.deploy_openwrt:
  stage: deploy
  variables:
    PACKAGE_FILE: ${NAME}_${CI_COMMIT_TAG}_${ARCHITECTURE}.ipk
    FEED_DIR: /var/www/opkg.homed.dev/${ARCHITECTURE}
  script:
  - "[[ -n ${PACKAGE_EXTRA} ]] && sh -c \"${PACKAGE_EXTRA}\""
  - "mkdir -p deploy/data/etc/init.d"
  - "mkdir -p deploy/data/usr/bin"
  - "cp -r deploy/luci/* deploy/data"
  - "cp deploy/procd/${NAME} deploy/data/etc/init.d"
  - "cp ${NAME}-openwrt-${ARCHITECTURE} deploy/data/usr/bin/${NAME}"
  - "sed -i \"s+^Version:.*+Version: ${CI_COMMIT_TAG}+g\" deploy/opkg/control"
  - "sed -i \"s+^Architecture:.*+Architecture: ${ARCHITECTURE}+g\" deploy/opkg/control"
  - "echo \"2.0\" > debian-binary"
  - "chmod +x deploy/data/etc/init.d/${NAME}"
  - "chmod +x deploy/opkg/postinst"
  - "chmod +x deploy/opkg/prerm"
  - "fakeroot tar -czf control.tar.gz -C deploy/opkg ."
  - "fakeroot tar -czf data.tar.gz -C deploy/data ."
  - "fakeroot tar -czf ${PACKAGE_FILE} control.tar.gz data.tar.gz debian-binary"
  - "mkdir -p ${FEED_DIR}"
  - "rm -f ${FEED_DIR}/${NAME}_*"
  - "cp ${PACKAGE_FILE} ${FEED_DIR}"
  - "/opt/scripts/opkgIndex.sh ${FEED_DIR} > ${FEED_DIR}/Packages"
  - "/opt/opkg/usign -S -m ${FEED_DIR}/Packages -s /opt/opkg/opkg.key -x ${FEED_DIR}/Packages.sig"
  - "gzip -fk ${FEED_DIR}/Packages"
  artifacts:
    paths:
    - ${PACKAGE_FILE}
    expire_in: never
  rules:
  - if: $CI_COMMIT_TAG =~ /^\d.\d.\d+$/
    when: always
  - when: never

.deploy_ndms:
  stage: deploy
  variables:
    PACKAGE_FILE: ${NAME}_${CI_COMMIT_TAG}_${ARCHITECTURE}.ipk
    FEED_DIR: /var/www/ndms.homed.su/${ARCHITECTURE}
  script:
  - "[[ -n ${PACKAGE_EXTRA} ]] && sh -c \"${PACKAGE_EXTRA}\""
  - "[[ -f deploy/data/etc/homed/${NAME}.conf ]] && sed -i -e \"s\\=/opt/${NAME}\\=/opt/var/lib/${NAME}\\g\" -e \"s\\=/usr/share\\=/opt/share\\g\" -e \"s\\=/var/log\\=/opt/var/log\\g\" deploy/data/etc/homed/${NAME}.conf && mkdir -p deploy/data/opt/etc/homed && mv deploy/data/etc/homed/${NAME}.conf deploy/data/opt/etc/homed && rm -r deploy/data/etc"
  - "[[ -d deploy/data/usr/share/${NAME} ]] && mkdir -p deploy/data/opt/share && mv deploy/data/usr/share/${NAME} deploy/data/opt/share && rm -r deploy/data/usr"
  - "[[ -d deploy/data/opt/${NAME} ]] && mkdir -p deploy/data/opt/var/lib && mv deploy/data/opt/${NAME} deploy/data/opt/var/lib/${NAME}"
  - "mkdir -p deploy/data/opt/etc/init.d"
  - "mkdir -p deploy/data/opt/bin"
  - "cp deploy/entware/* deploy/data/opt/etc/init.d"
  - "cp ${NAME}-ndms-${ARCHITECTURE} deploy/data/opt/bin/${NAME}"
  - "sed -i \"s+^Version:.*+Version: ${CI_COMMIT_TAG}+g\" deploy/ndms/control"
  - "sed -i \"s+^Architecture:.*+Architecture: ${ARCHITECTURE}+g\" deploy/ndms/control"
  - "echo \"2.0\" > debian-binary"
  - "chmod +x deploy/data/opt/etc/init.d/*"
  - "fakeroot tar -czf control.tar.gz -C deploy/ndms ."
  - "fakeroot tar -czf data.tar.gz -C deploy/data ."
  - "fakeroot tar -czf ${PACKAGE_FILE} control.tar.gz data.tar.gz debian-binary"
  - "mkdir -p ${FEED_DIR}"
  - "rm -f ${FEED_DIR}/${NAME}_*"
  - "cp ${PACKAGE_FILE} ${FEED_DIR}"
  - "/opt/scripts/opkgIndex.sh ${FEED_DIR} > ${FEED_DIR}/Packages"
  - "/opt/opkg/usign -S -m ${FEED_DIR}/Packages -s /opt/opkg/opkg.key -x ${FEED_DIR}/Packages.sig"
  - "gzip -fk ${FEED_DIR}/Packages"
  artifacts:
    paths:
    - ${PACKAGE_FILE}
    expire_in: never
  rules:
  - if: $CI_COMMIT_TAG =~ /^\d.\d.\d+$/ || $CI_COMMIT_TAG == "dev" # TODO: remove dev
    when: always
  - when: never

Deploy Docker Images:
  stage: deploy
  script:
  - "[[ -n ${DOCKER_EXTRA} ]] && sh -c \"${DOCKER_EXTRA}\""
  - "cp ${NAME}-linux-amd64 deploy/docker/${NAME}-amd64"
  - "cp ${NAME}-linux-aarch64 deploy/docker/${NAME}-arm64"
  - "cp ${NAME}-linux-armhf deploy/docker/${NAME}-arm"
  - "docker buildx create --driver-opt network=host --name job_${CI_JOB_ID} --use"
  - "docker buildx build --platform linux/arm64,linux/arm/v7,linux/amd64 --push --tag 127.0.0.1:5000/${NAME}:${CI_COMMIT_TAG} --tag 127.0.0.1:5000/${NAME}:latest deploy/docker/"
  - "docker buildx prune -af"
  - "docker buildx rm"
  rules:
  - if: $CI_COMMIT_TAG =~ /^\d.\d.\d+$/ || $CI_COMMIT_TAG == "dev"
    when: always
  - when: never

Deploy Linux Package (amd64):
  extends: .deploy_linux
  variables:
    ARCHITECTURE: amd64

Deploy Linux Package (aarch64):
  extends: .deploy_linux
  variables:
    ARCHITECTURE: aarch64

Deploy Linux Package (arm64):
  extends: .deploy_linux
  variables:
    ARCHITECTURE: arm64

Deploy Linux Package (armhf):
  extends: .deploy_linux
  variables:
    ARCHITECTURE: armhf

Deploy OpenWRT Package (aarch64_generic):
  extends: .deploy_openwrt
  variables:
    ARCHITECTURE: aarch64_generic

Deploy OpenWRT Package (arm_cortex-a7_neon-vfpv4):
  extends: .deploy_openwrt
  variables:
    ARCHITECTURE: arm_cortex-a7_neon-vfpv4

Deploy OpenWRT Package (arm_cortex-a9_neon):
  extends: .deploy_openwrt
  variables:
    ARCHITECTURE: arm_cortex-a9_neon

Deploy OpenWRT Package (mips_24kc):
  extends: .deploy_openwrt
  variables:
    ARCHITECTURE: mips_24kc

Deploy OpenWRT Package (mipsel_24kc):
  extends: .deploy_openwrt
  variables:
    ARCHITECTURE: mipsel_24kc

Deploy Keenetic NDMS Package (aarch64-3.10):
  extends: .deploy_ndms
  variables:
    ARCHITECTURE: aarch64-3.10

Deploy Keenetic NDMS Package (mipssf-k3.4):
  extends: .deploy_ndms
  variables:
    ARCHITECTURE: mipssf-k3.4

Deploy Keenetic NDMS Package (mipselsf-k3.4):
  extends: .deploy_ndms
  variables:
    ARCHITECTURE: mipselsf-k3.4
